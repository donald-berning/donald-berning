name: CI + CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DateTimeBuild: (Get-Date).ToString('yyyyMMdd.HHmm')
  b: ${{ github.run_number }}
  bOffset: 216

jobs:
  Preamble:
    runs-on: windows-latest
    steps:
      - name: Build app for release to virp $env:b
        run: |
          echo "Build number $env:b  DateTimeBuild $env.DateTimeBuild ."
      - run: echo "triggered by a ${{ github.event_name }} event"
      - run: echo "for branch ${{ github.ref }} in ${{ github.repository }}"
      - run: echo "for GITHUB.RUN_NUMBER = ${{ github.run_number }} and b = ${{ env.b }}."  
      - run: |
          echo " env b= $env:b --- ${{env.b}}"
          $env:b = ${{ github.run_number }} + ${{ env.bOffset }}
          echo "Build number $env:b"
          echo " env b= $env:b --- ${{env.b}}"
          echo " env b= $env:b"
          
  Build:
    if: false #skips the step (or job)
    runs-on: windows-latest
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }} 
      outDateTimeBuild: ${{steps.zip.outputs.outDateTimeBuild}}   
    steps:
      - uses: actions/checkout@v2

      - name: Compile
        run: echo Hello, world!
      - id: step1
        run: echo "::set-output name=test::hello"
      - id: step2
        run: echo "::set-output name=test::world"
      # - run: |
      #    $DateTimeBuild = (Get-Date).ToString('yyyyMMdd.HHmm')
      #    # echo "---$DateTimeBuild---  ---${{ $env.datetimebuild }}---"
      # - run: echo "---$DateTimeBuild---  ---${{ $env.datetimebuild }}---  build number $env.b = ${{$env.b}}"
      - id: Zip
        run: |
          $env:b = ${{ github.run_number }} + ${{ env.bOffset }}
          echo "github.run_number ${{ github.run_number }} and Build number $env:b"
          # $DateTimeBuild = (Get-Date).ToString('yyyyMMdd.HHmm')
          $DateTimeBuild = ${{ env.datetimebuild }}
          # Compress-Archive -Path \\VAAUSCREWEB80.aac.dva.va.gov\DeploymentFiles\VIRP\Builds\DEV\VIRP_SERVICE, \\VAAUSCREWEB80.aac.dva.va.gov\DeploymentFiles\VIRP\Builds\DEV\VIRP_WEB -DestinationPath "\\VAAUSCREWEB80.aac.dva.va.gov\DeploymentFiles\VIRP\Builds\DEV\$DateTimeBuild.deploy.zip"
          echo "::set-output name=outDateTimeBuild::$DateTimeBuild"
          echo "---$DateTimeBuild---  ---${{ env.datetimebuild }}---"


    
  DeployDev:
    name: Deploy to Dev 
    needs: [Build]
    runs-on: ubuntu-latest
    environment: 
      name: Development
      url: 'http://dev.myapp.com'
    steps:
      - name: Deploy
        run: echo ${{needs.Build.outputs.output1}} ${{needs.Build.outputs.output2}} datetimebuild ${{needs.Build.outputs.outDateTimeBuild}}
      - run: echo "github.run_number ${{ github.run_number }}  build number ${{ env.b }}  DateTimeBuild  ${{ env.DateTimeBuild }}"
      - run: echo I am deploying! I would like this to run automatically with build.
      - run: echo Expand-Archive -Path "\\VAAUSCREWEB80.aac.dva.va.gov\DeploymentFiles\VIRP\Builds\DEV\${{needs.Build.outputs.outDateTimeBuild}}.deploy.zip" -DestinationPath "\\VAAUSCREWEB50.aac.dva.va.gov\d$\inetpub\wwwroot"
      - run: echo Will we have an issue with blanks around the datetime stamp?

      - name: Deploy2
        # ${{ env.datetimebuild }} is undefined in later jobs, grrr.
        run: echo ${{needs.Build.outputs.output1}} ${{needs.Build.outputs.output2}} datetimebuild ${{needs.Build.outputs.outDateTimeBuild}} or ${{ env.datetimebuild }}
      - run: echo Expand-Archive -Path "\\VAAUSCREWEB80.aac.dva.va.gov\DeploymentFiles\VIRP\Builds\DEV\${{ env.datetimebuild }}.deploy.zip" -DestinationPath "\\VAAUSCREWEB50.aac.dva.va.gov\d$\inetpub\wwwroot"


  DeployStaging:
    name: Deploy to Staging 
    if: github.event_name == 'pull_request'
    needs: [Build]
    runs-on: ubuntu-latest
    environment: 
      name: Staging
      url: 'http://test.myapp.com'
    steps:
      - name: Deploy
        run: echo ${{needs.Build.outputs.output1}} ${{needs.Build.outputs.output2}} ${{needs.Build.outputs.outDateTimeBuild}} github.run_number ${{ github.run_number }}   
      - run: echo I am deploying! 
            
  DeployProd:
    name: Deploy to Production 
    if: github.event_name == 'pull_request'
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    environment: 
      name: Production
      url: 'http://www.myapp.com'
    steps:
      - name: Deploy
        run: echo ${{needs.Build.outputs.output1}} ${{needs.Build.outputs.output2}} ${{needs.Build.outputs.outDateTimeBuild}} github.run_number ${{ github.run_number }}       
      - run: echo I am deploying! 
